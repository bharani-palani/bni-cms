{"version":3,"sources":["components/mainApp/errorCatch.js","components/mainApp/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["ErrorCatch","props","error","errorInfo","document","title","react_default","a","createElement","className","JSON","stringify","ErrorBoundary","_this","Object","classCallCheck","this","_super","call","checkNetwork","window","navigator","onLine","state","isOnline","setState","errorCatch","children","React","Component","Root","lazy","Promise","all","__webpack_require__","e","then","bind","AppLoader","react_loader_spinner_default","type","color","height","width","App","mainApp_ErrorBoundary","react","fallback","App_AppLoader","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"+OA8BeA,MA5Bf,SAAoBC,GACnB,IAAOC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,UAGd,OADAC,SAASC,MAAT,wBAECC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wDACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iDACbH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,iEACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACbC,KAAKC,UAAUT,IAEjBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDACbC,KAAKC,UAAUR,UCiBTS,oDAhCd,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAI,EAAAC,KAAAF,KAAMf,IAIPkB,aAAe,WACd,OAAOC,OAAOC,UAAUC,SAAU,GAJlCT,EAAKU,MAAQ,CAAErB,MAAO,KAAMC,UAAW,KAAMqB,UAAU,GAFrCX,uDASnB,gDAIA,6CAIA,SAAkBX,EAAOC,GACxBa,KAAKS,SAAS,CACbvB,MAAOA,EACPC,UAAWA,0BAIb,WACC,OAAIa,KAAKO,MAAMpB,UACPG,EAAAC,EAAAC,cAACkB,EAAD,CAAYxB,MAAOc,KAAKO,MAAMrB,MAAOC,UAAWa,KAAKO,MAAMpB,YAE5Da,KAAKf,MAAM0B,gBA7BQC,IAAMC,WCE5BC,eAAOF,IAAMG,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAExBC,EAAY,kBACjBhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CAAQiC,KAAI,YAAeC,MAAK,UAAaC,OAAQ,IAAKC,MAAO,QAkBpDC,MAVf,WACC,OACCtC,EAAAC,EAAAC,cAACqC,EAAD,KACCvC,EAAAC,EAAAC,cAACsC,EAAA,SAAD,CAAUC,SAAUzC,EAAAC,EAAAC,cAACwC,EAAD,OACnB1C,EAAAC,EAAAC,cAACsB,EAAD,SCVgBmB,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACLhD,EAAAC,EAAAC,cAAC+C,EAAD,MACAnD,SAASoD,eAAe,SD0HtB,kBAAmBnC,WACrBA,UAAUoC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.2feac562.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ErrorCatch(props) {\n\tconst {error, errorInfo} = props;\n\n\tdocument.title = `Somethihng went wrong`;\n\treturn (\n\t\t<div className=\"\">\n\t\t\t<div className=\"p-5\">\n\t\t\t\t<div className=\"position-relative\">\n\t\t\t\t\t<div className=\"position-absolute top-50 start-50 translate-middle-x\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<i className=\"fa fa-exclamation-triangle fa-5x text-danger\" />\n\t\t\t\t\t\t\t<h1>Somethihng went wrong!</h1>\n\t\t\t\t\t\t\t<h4>Please contact administrator on this.</h4>\n\t\t\t\t\t\t\t<div className=\"error-details\">This could be cause of some malfunction in your application..</div>\n\t\t\t\t\t\t\t<div className='text-danger p-1 border border-danger rounded mb-2'>\n\t\t\t\t\t\t\t\t{JSON.stringify(error)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='text-danger p-1 border border-danger rounded'>\n\t\t\t\t\t\t\t\t{JSON.stringify(errorInfo)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ErrorCatch;\n","import React from 'react';\r\nimport ErrorCatch from './errorCatch';\r\n\r\n// Note: Error bounday should only be class component. Please dont change.\r\nclass ErrorBoundary extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { error: null, errorInfo: null, isOnline: true };\r\n\t}\r\n\r\n\tcheckNetwork = () => {\r\n\t\treturn window.navigator.onLine || false;\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\t// this.interval = setInterval(() => this.setState({ isOnline: this.checkNetwork() }), 5000);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\t// clearInterval(this.interval);\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tthis.setState({\r\n\t\t\terror: error,\r\n\t\t\terrorInfo: errorInfo\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.errorInfo) {\r\n\t\t\treturn <ErrorCatch error={this.state.error} errorInfo={this.state.errorInfo}  />;\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Suspense } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport ErrorBoundary from './components/mainApp/ErrorBoundary';\r\nimport 'bootstrap/dist/js/bootstrap.min.js';\r\nimport './index.scss';\r\n\r\nconst Root = React.lazy(() => import('./components/mainApp/Root'));\r\n\r\nconst AppLoader = () => (\r\n\t<div className=\"spinner\">\r\n\t\t<Loader type={`ThreeDots`} color={`#c2d82e`} height={100} width={100} />\r\n\t</div>\r\n);\r\n\r\n// todo: \r\n// 1. fetch JWT token and store in local storage on any case (may or may not app installed or configured)\r\n// 2. if app connected show root page, but installation not done, show installation page. Configure parameters in DB accordingly\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<ErrorBoundary>\r\n\t\t\t<Suspense fallback={<AppLoader />}>\r\n\t\t\t\t<Root />\r\n\t\t\t</Suspense>\r\n\t\t</ErrorBoundary>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}